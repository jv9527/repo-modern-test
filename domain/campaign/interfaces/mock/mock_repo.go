// Code generated by MockGen. DO NOT EDIT.
// Source: campaign/interfaces/repository.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/tokopedia/go-test/domain/campaign/model"
)

// MockCampaignCacheRepository is a mock of CampaignCacheRepository interface.
type MockCampaignCacheRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCampaignCacheRepositoryMockRecorder
}

// MockCampaignCacheRepositoryMockRecorder is the mock recorder for MockCampaignCacheRepository.
type MockCampaignCacheRepositoryMockRecorder struct {
	mock *MockCampaignCacheRepository
}

// NewMockCampaignCacheRepository creates a new mock instance.
func NewMockCampaignCacheRepository(ctrl *gomock.Controller) *MockCampaignCacheRepository {
	mock := &MockCampaignCacheRepository{ctrl: ctrl}
	mock.recorder = &MockCampaignCacheRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCampaignCacheRepository) EXPECT() *MockCampaignCacheRepositoryMockRecorder {
	return m.recorder
}

// CreateCampaignData mocks base method.
func (m *MockCampaignCacheRepository) CreateCampaignData(param model.CampaignCacheRepoCreateCampaignDataParam) (model.CampaignCacheRepoCreateCampaignDataResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCampaignData", param)
	ret0, _ := ret[0].(model.CampaignCacheRepoCreateCampaignDataResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCampaignData indicates an expected call of CreateCampaignData.
func (mr *MockCampaignCacheRepositoryMockRecorder) CreateCampaignData(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCampaignData", reflect.TypeOf((*MockCampaignCacheRepository)(nil).CreateCampaignData), param)
}

// GetCampaignData mocks base method.
func (m *MockCampaignCacheRepository) GetCampaignData(param model.CampaignCacheRepoGetCampaignDataParam) (model.CampaignCacheRepoGetCampaignDataResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCampaignData", param)
	ret0, _ := ret[0].(model.CampaignCacheRepoGetCampaignDataResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCampaignData indicates an expected call of GetCampaignData.
func (mr *MockCampaignCacheRepositoryMockRecorder) GetCampaignData(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCampaignData", reflect.TypeOf((*MockCampaignCacheRepository)(nil).GetCampaignData), param)
}

// MockCampaignSQLRepository is a mock of CampaignSQLRepository interface.
type MockCampaignSQLRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCampaignSQLRepositoryMockRecorder
}

// MockCampaignSQLRepositoryMockRecorder is the mock recorder for MockCampaignSQLRepository.
type MockCampaignSQLRepositoryMockRecorder struct {
	mock *MockCampaignSQLRepository
}

// NewMockCampaignSQLRepository creates a new mock instance.
func NewMockCampaignSQLRepository(ctrl *gomock.Controller) *MockCampaignSQLRepository {
	mock := &MockCampaignSQLRepository{ctrl: ctrl}
	mock.recorder = &MockCampaignSQLRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCampaignSQLRepository) EXPECT() *MockCampaignSQLRepositoryMockRecorder {
	return m.recorder
}

// CreateCampaignData mocks base method.
func (m *MockCampaignSQLRepository) CreateCampaignData(param model.CampaignSQLRepoCreateCampaignDataParam) (model.CampaignSQLRepoCreateCampaignDataResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCampaignData", param)
	ret0, _ := ret[0].(model.CampaignSQLRepoCreateCampaignDataResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCampaignData indicates an expected call of CreateCampaignData.
func (mr *MockCampaignSQLRepositoryMockRecorder) CreateCampaignData(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCampaignData", reflect.TypeOf((*MockCampaignSQLRepository)(nil).CreateCampaignData), param)
}

// GetCampaignData mocks base method.
func (m *MockCampaignSQLRepository) GetCampaignData(param model.CampaignSQLRepoGetCampaignDataParam) (model.CampaignSQLRepoGetCampaignDataResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCampaignData", param)
	ret0, _ := ret[0].(model.CampaignSQLRepoGetCampaignDataResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCampaignData indicates an expected call of GetCampaignData.
func (mr *MockCampaignSQLRepositoryMockRecorder) GetCampaignData(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCampaignData", reflect.TypeOf((*MockCampaignSQLRepository)(nil).GetCampaignData), param)
}
